{"version":3,"file":"bonita-authentication.js","sourceRoot":"","sources":["file:///F:/Develpment/AngularWorkOrder/@NgBonita/tmp/broccoli_type_script_compiler-input_base_path-jBV9tdnG.tmp/0/src/app/bonita-authentication.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { BonitaConfig } from './bonita-config';\nimport { BonitaSession } from './bonita-session';\nimport { BonitaUtils } from './bonita-utils';\nimport { Http, Response, RequestOptions, RequestMethod, Headers } from '@angular/http';\nimport { Observable } from 'rxjs/Observable';\nimport 'rxjs/Rx';\n\n@Injectable()\nexport class BonitaAuthentication {\n  isLogged: boolean = false;\n  oHeaders = new Headers();\n\n  constructor(private http: Http,\n    private bonitaConfig: BonitaConfig,\n    private bonitaSession: BonitaSession,\n    private bonitaUtils: BonitaUtils) {\n    this.oHeaders.append('Content-Type', 'application/x-www-form-urlencoded; charset=UTF-8');\n  }\n\n  login(username, password) {\n    let options = new RequestOptions({\n      method: RequestMethod.Post,\n      url: this.bonitaConfig.getBonitaUrl + '/loginservice',\n      body: this.bonitaUtils.serializeData({\n        username: username,\n        password: password,\n        redirect: false\n      }),\n      headers: this.oHeaders\n    });\n\n    return this.http.request(this.bonitaConfig.getBonitaUrl() + '/loginservice', options)\n      .toPromise()\n      .then(function (res) {\n        // Retrieve current session to get user id;\n        this.bonitaSession.getCurrent()\n          .toPromise()\n          .then(function (session) {\n            if (typeof session.user_id === 'undefined') {\n              Observable.throw('No active session found');\n            } else {\n              this.bonitaConfig.setUsername(session.user_name);\n              this.bonitaConfig.setUserId(session.user_id);\n              this.isLogged = true;\n            }\n          });\n      })\n      .catch(this.handelError);\n  }\n\n  checkForActiveSession() {\n    return this.bonitaSession.getCurrent()\n      .subscribe(\n      function (session) {\n        if (typeof session.user_id === 'undefined') {\n          Observable.throw('No active session found');\n        } else {\n          this.bonitaConfig.setUsername(session.user_name);\n          this.bonitaConfig.setUserId(session.user_id);\n          this.isLogged = true;\n        }\n      },\n      this.handelError);\n  }\n\n  logout() {\n    let options = new RequestOptions({\n      method: RequestMethod.Get,\n      url: this.bonitaConfig.getBonitaUrl + '/logoutservice',\n      body: this.bonitaUtils.serializeData({\n        redirect: false\n      }),\n      headers: this.oHeaders\n    });\n\n    return this.http.get(this.bonitaConfig.getBonitaUrl() + '/logoutservice', options)\n      .subscribe(\n      function (session) {\n        this.bonitaConfig.setUserName(null);\n        this.bonitaConfig.setUserId(null);\n        this.isLogged = false;\n      },\n      this.handelError\n      );\n    // .toPromise()\n    // .then(function () {\n    //   this.bonitaConfig.setUserName(null);\n    //   this.bonitaConfig.setUserId(null);\n    //   this.isLogged = false;\n    // })\n    // .catch(this.handelError);\n  }\n\n  handelError(error: Response) {\n    console.error(error);\n    this.isLogged = false;\n    return Observable.throw(error.json().error || 'Server Error');\n  }\n}\n"]}