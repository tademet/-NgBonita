{"version":3,"file":"bonita-session.js","sourceRoot":"","sources":["file:///F:/Develpment/AngularWorkOrder/@NgBonita/tmp/broccoli_type_script_compiler-input_base_path-jBV9tdnG.tmp/0/src/app/bonita-session.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qBAA2B,eAAe,CAAC,CAAA;AAC3C,8BAA+B,iBAAiB,CAAC,CAAA;AACjD,2BAA2B,iBAAiB,CAAC,CAAA;AAC7C,qBAA+B,eAAe,CAAC,CAAA;AAC/C,QAAO,SAAS,CAAC,CAAA;AAGjB;;;;;GAKG;AAEH;IAEE;;;;;OAKG;IACH,uBAAoB,EAAgB,EAC1B,IAAU;QADA,OAAE,GAAF,EAAE,CAAc;QAC1B,SAAI,GAAJ,IAAI,CAAM;IAAG,CAAC;IAExB;;;;OAIG;IACH,kCAAU,GAAV;QACE,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,YAAY,EAAE,GAAG,4BAA4B,CAAC;aACxE,GAAG,CAAC,IAAI,CAAC,WAAW,CAAC;aACrB,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IAC7B,CAAC;IAEO,mCAAW,GAAnB,UAAoB,GAAa;QAC/B,IAAI,IAAI,GAAG,GAAG,CAAC,IAAI,EAAE,CAAC;QACtB,MAAM,CAAC,IAAI,CAAC,IAAI,IAAI,EAAE,CAAC;IACzB,CAAC;IAEO,mCAAW,GAAnB,UAAoB,KAAe;QACjC,IAAI,MAAM,GAAG,KAAK,CAAC,MAAM,GAAM,KAAK,CAAC,MAAM,WAAM,KAAK,CAAC,UAAY;YACnE,cAAc,CAAC;QAEf,OAAO,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,yBAAyB;QAChD,MAAM,CAAC,uBAAU,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;IAClC,CAAC;IAlCH;QAAC,iBAAU,EAAE;;qBAAA;IAmCb,oBAAC;AAAD,CAAC,AAlCD,IAkCC;AAlCY,qBAAa,gBAkCzB,CAAA","sourcesContent":["import { Injectable } from '@angular/core';\nimport { BonitaConfig }   from './bonita-config';\nimport { Observable } from 'rxjs/Observable';\nimport { Http, Response } from '@angular/http';\nimport 'rxjs/Rx';\n\n\n/**\n * Resource used to access Bonita session information\n *  When using getCurrent, be careful to check for session properties (if no session exists an object without properties is returned)\n * @export\n * @class BonitaSession\n */\n@Injectable()\nexport class BonitaSession {\n\n  /**\n   * Creates an instance of BonitaSession.\n   *\n   * @param {BonitaConfig} bg\n   * @param {Http} http\n   */\n  constructor(private bg: BonitaConfig,\n    private http: Http) {}\n\n  /**\n   *\n   *\n   * @returns\n   */\n  getCurrent() {\n    return this.http.get(this.bg.getBonitaUrl() + '/API/system/session/unused')\n      .map(this.extractData)\n      .catch(this.handleError);\n  }\n\n  private extractData(res: Response) {\n    let body = res.json();\n    return body.data || {};\n  }\n\n  private handleError(error: Response) {\n    let errMsg = error.status ? `${error.status} - ${error.statusText}` :\n    'Server error';\n\n    console.error(errMsg); // log to console instead\n    return Observable.throw(errMsg);\n  }\n}\n"]}